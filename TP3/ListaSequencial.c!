#include <stdio.h>
#include <string.h>

typedef struct Jogador{
    int id;
    char nome[50];
    int altura;
    int peso;
    char universidade[80];
    int anoNascimento;
    char cidadeNascimento[50];
    char estadoNascimento[50];
}Jogador;

//metodo para dividir a string linha em substrings entre as virgulas
void split(char linha[], char substrings[8][100]) {
    int qtSubstrings = 0;
    int cS = 0;//posicao da substring atual
    int c = 0;//posicao da linha
    //inicializacao da matriz substrings para fins de controle
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 100; j++) {
            substrings[i][j] = '\0';
        }
    }
    //loop que repete ate que a string linha seja totalmente percorrida
    while (linha[c] != '\0') {
        if (linha[c] != ',') {
            while (linha[c] != ',' && linha[c] != '\0') {
                if(linha[c] == '\n')c++;//ignorar as quebras de linha
                else{
                    substrings[qtSubstrings][cS] = linha[c];
                    c++;
                    cS++;
                }
            }
            cS = 0;
            qtSubstrings++;
        } else {
            //condicional para caso o campo esteja vazio
            if(linha[c+1] == ','||linha[c+1] == '\n'||linha[c+1] == '\0'){
                strcpy(substrings[qtSubstrings],"nao informado");
                qtSubstrings++;
            }
            c++; 
        }
    }
}
//metodo para realizar a leitura de um arquivo e guardar as informacoes em um array de jogadores
void ler(Jogador jogadores[]){
    FILE *file=fopen("/tmp/players.csv","r");
    char linha[200];
    int qtJogadores=-1;//inicializacao negativa para que a primeira linha seja ignorada

    while(fgets(linha, sizeof(linha), file) != NULL){
        char substrings[8][100];
        if(qtJogadores>=0){
            split(linha,substrings);
            //conversao de strings para inteiros
            int ID = atoi(substrings[0]);
            int h = atoi(substrings[2]);
            int p = atoi(substrings[3]);
            int ano = atoi(substrings[5]);

            jogadores[qtJogadores].id=ID;
            strcpy(jogadores[qtJogadores].nome, substrings[1]);
            jogadores[qtJogadores].altura=h;
            jogadores[qtJogadores].peso=p;
            strcpy(jogadores[qtJogadores].universidade, substrings[4]);
            jogadores[qtJogadores].anoNascimento=ano;
            strcpy(jogadores[qtJogadores].cidadeNascimento, substrings[6]);
            strcpy(jogadores[qtJogadores].estadoNascimento, substrings[7]);
            qtJogadores++;
        
        }
        else qtJogadores++;
    }
    fclose(file);
}

//metodo para imprimir os atributos do jogador com id recebido
void imprime(int tam,Jogador jogadores[]){
    for(int i=0;i<tam;i++){
        printf("[%d] ## %s ## %d ## %d ## %d ## %s ## %s ## %s ##\n",
        i,
        jogadores[i].nome,
        jogadores[i].altura,
        jogadores[i].peso,
        jogadores[i].anoNascimento,
        jogadores[i].universidade,
        jogadores[i].cidadeNascimento,
        jogadores[i].estadoNascimento);
    }
}
//Metodo para fazer o shift das remoçoes
void shiftR(Jogador jogadores[],int tam,int inicio){
    for(int i=inicio;i<tam-1;i++){
        jogadores[i]=jogadores[i+1];
    }
}
//Metodo para fazer o shift das insercoes
void shiftI(Jogador jogadores[],int inf,int sup){
    for(int i=inf;i>sup;i--){
        jogadores[i]=jogadores[i-1];
    }
}
//Metodo para remover no inicio
Jogador removerI(Jogador jogadores[],int tam){
    Jogador jogador=jogadores[0];
    shiftR(jogadores,tam,0);
    return jogador;

}
//Metodo para remover no Final
Jogador removerF(Jogador jogadores[],int tam){
    Jogador jogador=jogadores[tam-1];
    return jogador;
}
//Metodo para remover em qualquer posicao
Jogador removerQualquer(Jogador jogadores[],int tam,int posicao){
    Jogador jogador=jogadores[posicao];
    shiftR(jogadores,tam,posicao);
    return jogador;
}
//Metodo para inserir  no inicio
void inserirI(Jogador subJogadores[],int tam,Jogador jogadores[],int id){
    shiftI(subJogadores,tam,0);
    subJogadores[0]=jogadores[id];
}
//Metodo para inserir no Final
void inserirF(Jogador subJogadores[],int tam,Jogador jogadores[],int id){
    subJogadores[tam]=jogadores[id];
}
//Metodo para inserir  em qualquer posicao
void inserirQ(Jogador subJogadores[],int tam,Jogador jogadores[],int id,int posicao){
    shiftI(subJogadores,tam,posicao);
    subJogadores[posicao]=jogadores[id];
}

int main(){

    char id[10];
    char comandos[100];
    Jogador jogadores[3922];
    Jogador subJogadores[500];
    Jogador removidos[100];
    int qtsub=0,nOperacoes=0,qtRemovidos=0;
    //construçao do subarray com os ids digitados
    do {
        scanf("%s", id);
        if (strcmp(id, "FIM") != 0) {
            int identificador = atoi(id);
            ler(jogadores);
            subJogadores[qtsub]=jogadores[identificador];
            qtsub++;
        }
    } while (strcmp(id, "FIM") != 0);
    scanf("%d", &nOperacoes);
    //loop para receber todas as operaçoes
    for(int i=0;i<nOperacoes;i++){
        fflush(stdin);
        scanf(" %[^\r\n]%*c", comandos);
        //Repartiçao da string pelo delimitador espaço em branco
        char *tokens[100]; 
        int token_count = 0;
        char *token = strtok(comandos, " ");
        while (token != NULL) {
            tokens[token_count] = token;
            token_count++;
            token = strtok(NULL, " ");
        }
        
        if(strcmp(tokens[0],"RI")==0){
            removidos[qtRemovidos]=removerI(subJogadores,qtsub);
            qtRemovidos++;
            qtsub--;
        }
        else if(strcmp(tokens[0],"RF")==0){
                removidos[qtRemovidos]=removerF(subJogadores,qtsub);
                qtRemovidos++;
                qtsub--;
        }
        else if(strcmp(tokens[0],"R*")==0){
            
            int pos = atoi(tokens[1]);
            removidos[qtRemovidos]=removerQualquer(subJogadores,qtsub,pos);
            qtRemovidos++;
            qtsub--;
        }
        else if(strcmp(tokens[0],"II")==0){
            int identificador = atoi(tokens[1]);
            inserirI(subJogadores,qtsub,jogadores,identificador);
            qtsub++;
        }
        else if(strcmp(tokens[0],"IF")==0){
            int identificador = atoi(tokens[1]);
            inserirF(subJogadores,qtsub,jogadores,identificador);
            qtsub++;
        }
        else if(strcmp(tokens[0],"I*")==0){
            int identificador = atoi(tokens[2]);
            int pos=atoi(tokens[1]);
            inserirQ(subJogadores,qtsub,jogadores,identificador,pos);
            qtsub++;
        }
    }
    //impressao dos removidos
    for(int i=0;i<qtRemovidos;i++){
        printf("(R) %s \n",removidos[i].nome);
    }
    imprime(qtsub,subJogadores);
    

}