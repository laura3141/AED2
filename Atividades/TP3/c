import java.io.*;
import java.util.Scanner;

public class HeapSort{
    //Atributos estaticos relativos ao numero de comparaçoes e ao tempo de execução do algoritimo
    static int numeroC;
    static int numeroM;
    static String tempoE;

    //Metodo quick sort para ordenar os jogadores
    public static Jogador[] sort(Jogador jogadores[],int n) {
       
        for(int tam=2;tam<=n;tam++){
            jogadores=construir(jogadores,tam);
        }
        int ultimaPos=n-1;
        while(ultimaPos>0){
            numeroM=numeroM+3;
            Jogador aux=jogadores[ultimaPos];
            jogadores[ultimaPos]=jogadores[0];
            jogadores[0]=aux;
            ultimaPos--;
            jogadores=reconstruir(jogadores, ultimaPos);
        }
        return jogadores;
    }
    //Metodo para construir o heap
    public static Jogador[] construir(Jogador jogadores[],int tam){
        for(int i=tam-1;i>0&&(jogadores[i].getAltura()>jogadores[(i-1)/2].getAltura()||(jogadores[i].getAltura()==jogadores[(i-1)/2].getAltura()&&jogadores[i].getNome().compareTo(jogadores[(i-1)/2].getNome())>0));i=(i-1)/2){
            numeroC=numeroC+2;
            numeroM=numeroM+3;
            Jogador aux=jogadores[i];
            jogadores[i]=jogadores[(i-1)/2];
            jogadores[(i-1)/2]=aux;
        }
        return jogadores;
    }
    //Metodo para reconstruir o heap ap[os a troca do indice 0 com o ultimo
    public static Jogador[] reconstruir(Jogador jogadores[],int tam){
    int i = 0;
    while(2*i<tam){
        int filho = getMaiorFilho(i, tam,jogadores);
        numeroC=numeroC+2;
        if(jogadores[i].getAltura()<jogadores[filho].getAltura()||(jogadores[i].getAltura()==jogadores[filho].getAltura()&&jogadores[i].getNome().compareTo(jogadores[filho].getNome())<0)){
            numeroM=numeroM+3;
            Jogador aux=jogadores[i];
            jogadores[i]=jogadores[filho];
            jogadores[filho]=aux;
            i = filho;
        }else{//os demais estao certos
            i = tam;
        }
    }
        return jogadores;
    }

    //Metodo para retornar o maior filho 
    public static int getMaiorFilho(int i, int tamHeap,Jogador jogadores[]){
        int filho;
        numeroC=numeroC+2;
        if (2*i+1 == tamHeap ||(jogadores[2*i+1].getAltura()>jogadores[2*i+2].getAltura()||(jogadores[2*i+1].getAltura()==jogadores[2*i+2].getAltura()&&jogadores[2*i+1].getNome().compareTo(jogadores[2*i+2].getNome())>0))){
            filho = 2*i+1;
        } else {
            filho = 2*i + 2;
        }
        return filho;
    }

    //Método para criar um arquivo Log
    public static void criaLog(){
        try (FileWriter fileWriter = new FileWriter("808756_heapsort.txt")) {
            fileWriter.write("808756\t"+numeroC+"\t"+numeroM+"\t"+tempoE+"\t");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //Método para impressão dos atributos de jogadores presentes no array 
     public static void imprimiArray(Jogador jogadores[],int tam){
        for(int i=0;i<tam;i++){
              System.out.println("["+jogadores[i].getId()+" ## "+jogadores[i].getNome()+" ## "+jogadores[i].getAltura()+" ## "+jogadores[i].getPeso()+" ## "+jogadores[i].getAnoNascimento()+" ## "+jogadores[i].getUniversidade()+" ## "+jogadores[i].getCidadeNascimento()+" ## "+jogadores[i].getEstadoNascimento()+"]");
        }
    
    }
    //Inicio da main
    public static void main(String[] args) {
        
        double inicio=System.nanoTime();
        Scanner scanner= new Scanner(System.in);
        String id="";
        Jogador jogadores[]=new Jogador[4000];
        Jogador jogadoresSub[]=new Jogador[4000];
        int c=0;
        //Criaçao do subarray com os ids digitados
        do{
            id=scanner.next();
            if(!id.equals("FIM")){
                int identificador=Integer.parseInt(id);
                jogadores=Jogador.ler();
                jogadoresSub[c]=jogadores[identificador];
                c++;
            }            
        }while(!id.equals("FIM"));
       //Chamada do metodo para ordenaçao do subarray
        Jogador jogadoresO1[]=new Jogador[4000];
        jogadoresO1=sort(jogadoresSub,c);
        imprimiArray(jogadoresO1, c);
        
        //Calculo final do tempo e criaçao do log
        double  fim=System.nanoTime();
        double tempoExecucao=fim-inicio;
        tempoE=Double.toString(tempoExecucao);
        criaLog();
        scanner.close();
    }
}

