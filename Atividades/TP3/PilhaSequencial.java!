import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

class Jogador {
    private int id;
    private String nome;
    private int altura;
    private int peso;
    private String universidade;
    private int anoNascimento;
    private String cidadeNascimento;
    private String estadoNascimento;

    // Construtor vazio
    public Jogador() {
    }

    // Construtor com parâmetros
    public Jogador(int id, String nome, int altura, int peso, String universidade, int anoNascimento, String cidadeNascimento, String estadoNascimento) {
        this.id = id;
        this.nome = nome;
        this.altura = altura;
        this.peso = peso;
        this.universidade = universidade;
        this.anoNascimento = anoNascimento;
        this.cidadeNascimento = cidadeNascimento;
        this.estadoNascimento = estadoNascimento;
    }

    // Métodos getters e setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public int getAltura() {
        return altura;
    }

    public void setAltura(int altura) {
        this.altura = altura;
    }

    public int getPeso() {
        return peso;
    }

    public void setPeso(int peso) {
        this.peso = peso;
    }

    public String getUniversidade() {
        return universidade;
    }

    public void setUniversidade(String universidade) {
        if(universidade==null){
            universidade="nao informado";
        }
        this.universidade = universidade;
    }

    public int getAnoNascimento() {
        return anoNascimento;
    }

    public void setAnoNascimento(int anoNascimento) {
        this.anoNascimento = anoNascimento;
    }

    public String getCidadeNascimento() {
        return cidadeNascimento;
    }

    public void setCidadeNascimento(String cidadeNascimento) {
        if(cidadeNascimento==null){
            cidadeNascimento="nao informado";
        }
        this.cidadeNascimento = cidadeNascimento;
    }

    public String getEstadoNascimento() {
        return estadoNascimento;
    }

    public void setEstadoNascimento(String estadoNascimento) {
        if(estadoNascimento==null)estadoNascimento="nao informado";
        this.estadoNascimento = estadoNascimento;
    }

    // Método clone
    public Jogador clone() {
        Jogador resp=new Jogador();
        resp.id=this.id;
        resp.nome=this.nome;
        resp.altura=this.altura;
        resp.peso=this.peso;
        resp.universidade=this.universidade;
        resp.anoNascimento=this.anoNascimento;
        resp.cidadeNascimento=this.cidadeNascimento;
        resp.estadoNascimento=this.estadoNascimento;
        return resp;
    }

    // Método ler que funciona através da extração de dados pelo arquivo csv
    public static Jogador[] ler() {
        Jogador jogadores[]=new Jogador[4000];
        int qtJ=-1; 
        String nomeArquivo = "/tmp/players.csv";
        //inicializado com -1 para que o loop while seja executado ignorando a primeira linh
        try (BufferedReader leitor = new BufferedReader(new FileReader(nomeArquivo))) {
            String linha;//guarda o conteudo da linha lida 
            while ((linha = leitor.readLine()) != null) {
                
                if(qtJ>=0){//Apartir da 2 linha
                    
                    jogadores[qtJ]=new Jogador();
                    Scanner sc= new Scanner(linha);
                    sc.useDelimiter(",");
                    int c=0;//contador de atributos
                    String atributos[]=new String[8];
                    while (sc.hasNext()) {
                        String str = sc.next();
                        atributos[c]=str;// armazena as substrings
                        c++;
                    }
                    if(atributos[6].length()==0){ 
                        atributos[6]=null;
                    }
                    if(atributos[4].length()==0){ 
                        atributos[4]=null;
                    }
                    jogadores[qtJ].setId(Integer.parseInt(atributos[0]));
                    jogadores[qtJ].setNome(atributos[1]);
                    jogadores[qtJ].setAltura(Integer.parseInt(atributos[2]));
                    jogadores[qtJ].setPeso(Integer.parseInt(atributos[3]));
                    jogadores[qtJ].setUniversidade(atributos[4]);
                    jogadores[qtJ].setAnoNascimento(Integer.parseInt(atributos[5]));
                    jogadores[qtJ].setCidadeNascimento(atributos[6]);
                    jogadores[qtJ].setEstadoNascimento(atributos[7]);
                    qtJ++;// incremento da quantidade de jogadores registrados
                    sc.close();
                    
                }
                else qtJ++;
            }
            
        } catch (IOException e) {
            e.printStackTrace();
        }
        return jogadores;
    }
}   
public class PilhaSequencial{
    
    //Método para realizar a insercao de um jogador na pilha
    public static Jogador[] inserirFinal(int id ,Jogador subJogadores[],Jogador jogadores[],int ultimaPos){
        subJogadores[ultimaPos]=jogadores[id];
        return subJogadores;
    }
    
    //metodo para retornar o jogador removido
    public static Jogador removerFinal(Jogador subJogadores[],int  ultimaPos){
        Jogador jogador=subJogadores[ultimaPos];
        return jogador;
    }

    //metodo para imprimir o array final
    public static void imprimiArray(Jogador jogadores[],int tam){
        for(int i=0;i<tam;i++){
            System.out.println("["+i+"] ## "+jogadores[i].getNome()+" ## "+jogadores[i].getAltura()+" ## "+jogadores[i].getPeso()+" ## "+jogadores[i].getAnoNascimento()+" ## "+jogadores[i].getUniversidade()+" ## "+jogadores[i].getCidadeNascimento()+" ## "+jogadores[i].getEstadoNascimento()+" ##");
        }
    }
    public static void main(String[] args) {
        
    Scanner scanner= new Scanner(System.in);
    String id="",comandos;
    int c=0,nOperacoes;
    Jogador jogadoresSub[]=new Jogador[4000];
    Jogador jogadores[]=new Jogador[4000];
    Jogador removidos[]=new Jogador[100];
    int qtRemovidos=0;

    //Criaçao do subarray com os ids digitados
    do{
        id=scanner.next();
        if(!id.equals("FIM")){
            int identificador=Integer.parseInt(id);
            jogadores=Jogador.ler();
            jogadoresSub[c]=jogadores[identificador];
            c++;
        }            
    }while(!id.equals("FIM"));

    nOperacoes=scanner.nextInt();// numero de operacoes
    scanner.nextLine();
    for(int i=0;i<nOperacoes;i++){
        comandos=scanner.nextLine();// leitura de cada operacao

        //remocao
        if(comandos.charAt(0)=='R'){
            removidos[qtRemovidos]=removerFinal(jogadoresSub, c-1);
            qtRemovidos++;
            c--;//decremento da quantidade de elementos presentes na pilha  
        }
        //insercao
        else if(comandos.charAt(0)=='I'){
            String[] palavras = comandos.split(" ");
            int identificador=Integer.parseInt(palavras[1]);
            jogadoresSub=inserirFinal(identificador, jogadoresSub, jogadores, c);
            c++;//incremento da quantidade de elementos presentes na pilha  
        }
    }
    //impressao dos removidos
    for(int i=0;i<qtRemovidos;i++){
        System.out.println("(R) "+removidos[i].getNome());
    }
    //impressao final
    imprimiArray(jogadoresSub, c);
    scanner.close();
    }
}
